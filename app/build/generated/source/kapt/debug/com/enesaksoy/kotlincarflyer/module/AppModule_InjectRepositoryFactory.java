// Generated by Dagger (https://dagger.dev).
package com.enesaksoy.kotlincarflyer.module;

import com.enesaksoy.kotlincarflyer.repo.CarRepository;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.FirebaseStorage;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_InjectRepositoryFactory implements Factory<CarRepository> {
  private final Provider<FirebaseAuth> authProvider;

  private final Provider<FirebaseStorage> storageProvider;

  private final Provider<FirebaseFirestore> firestoreProvider;

  public AppModule_InjectRepositoryFactory(Provider<FirebaseAuth> authProvider,
      Provider<FirebaseStorage> storageProvider, Provider<FirebaseFirestore> firestoreProvider) {
    this.authProvider = authProvider;
    this.storageProvider = storageProvider;
    this.firestoreProvider = firestoreProvider;
  }

  @Override
  public CarRepository get() {
    return injectRepository(authProvider.get(), storageProvider.get(), firestoreProvider.get());
  }

  public static AppModule_InjectRepositoryFactory create(Provider<FirebaseAuth> authProvider,
      Provider<FirebaseStorage> storageProvider, Provider<FirebaseFirestore> firestoreProvider) {
    return new AppModule_InjectRepositoryFactory(authProvider, storageProvider, firestoreProvider);
  }

  public static CarRepository injectRepository(FirebaseAuth auth, FirebaseStorage storage,
      FirebaseFirestore firestore) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.injectRepository(auth, storage, firestore));
  }
}
